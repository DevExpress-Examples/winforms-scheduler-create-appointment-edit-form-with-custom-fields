'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

#Disable Warning BC1591

Namespace SimpleCustomFields


	''' <summary>
	'''Represents a strongly typed in-memory cache of data.
	'''</summary>
	<System.Serializable()>
	<System.ComponentModel.DesignerCategoryAttribute("code")>
	<System.ComponentModel.ToolboxItem(True)>
	<System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")>
	<System.Xml.Serialization.XmlRootAttribute("CarsDBDataSet")>
	<System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>
	Partial Public Class CarsDBDataSet
		Inherits System.Data.DataSet

		Private tableCars As CarsDataTable

		Private tableCarScheduling As CarSchedulingDataTable

		Private relationCarsCarScheduling As System.Data.DataRelation

		Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Public Sub New()
			Me.BeginInit()
			Me.InitClass()
			Dim schemaChangedHandler As New System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
			AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
			AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
			Me.EndInit()
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
			MyBase.New(info, context, False)
			If (Me.IsBinarySerialized(info, context) = True) Then
				Me.InitVars(False)
				Dim schemaChangedHandler1 As New System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
				AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
				AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
				Return
			End If
			Dim strSchema As String = (CStr(info.GetValue("XmlSchema", GetType(String))))
			If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
				Dim ds As New System.Data.DataSet()
				ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
				If (ds.Tables("Cars") IsNot Nothing) Then
					MyBase.Tables.Add(New CarsDataTable(ds.Tables("Cars")))
				End If
				If (ds.Tables("CarScheduling") IsNot Nothing) Then
					MyBase.Tables.Add(New CarSchedulingDataTable(ds.Tables("CarScheduling")))
				End If
				Me.DataSetName = ds.DataSetName
				Me.Prefix = ds.Prefix
				Me.Namespace = ds.Namespace
				Me.Locale = ds.Locale
				Me.CaseSensitive = ds.CaseSensitive
				Me.EnforceConstraints = ds.EnforceConstraints
				Me.Merge(ds, False, System.Data.MissingSchemaAction.Add)
				Me.InitVars()
			Else
				Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
			End If
			Me.GetSerializationData(info, context)
			Dim schemaChangedHandler As New System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
			AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
			AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		<System.ComponentModel.Browsable(False)>
		<System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>
		Public ReadOnly Property Cars() As CarsDataTable
			Get
				Return Me.tableCars
			End Get
		End Property

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		<System.ComponentModel.Browsable(False)>
		<System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>
		Public ReadOnly Property CarScheduling() As CarSchedulingDataTable
			Get
				Return Me.tableCarScheduling
			End Get
		End Property

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		<System.ComponentModel.BrowsableAttribute(True)>
		<System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>
		Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
			Get
				Return Me._schemaSerializationMode
			End Get
			Set(ByVal value As System.Data.SchemaSerializationMode)
				Me._schemaSerializationMode = value
			End Set
		End Property

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		<System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>
		Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
			Get
				Return MyBase.Tables
			End Get
		End Property

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		<System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>
		Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
			Get
				Return MyBase.Relations
			End Get
		End Property

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Protected Overrides Sub InitializeDerivedDataSet()
			Me.BeginInit()
			Me.InitClass()
			Me.EndInit()
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Public Overrides Function Clone() As System.Data.DataSet
			Dim cln As CarsDBDataSet = (CType(MyBase.Clone(), CarsDBDataSet))
			cln.InitVars()
			cln.SchemaSerializationMode = Me.SchemaSerializationMode
			Return cln
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Protected Overrides Function ShouldSerializeTables() As Boolean
			Return False
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Protected Overrides Function ShouldSerializeRelations() As Boolean
			Return False
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
			If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
				Me.Reset()
				Dim ds As New System.Data.DataSet()
				ds.ReadXml(reader)
				If (ds.Tables("Cars") IsNot Nothing) Then
					MyBase.Tables.Add(New CarsDataTable(ds.Tables("Cars")))
				End If
				If (ds.Tables("CarScheduling") IsNot Nothing) Then
					MyBase.Tables.Add(New CarSchedulingDataTable(ds.Tables("CarScheduling")))
				End If
				Me.DataSetName = ds.DataSetName
				Me.Prefix = ds.Prefix
				Me.Namespace = ds.Namespace
				Me.Locale = ds.Locale
				Me.CaseSensitive = ds.CaseSensitive
				Me.EnforceConstraints = ds.EnforceConstraints
				Me.Merge(ds, False, System.Data.MissingSchemaAction.Add)
				Me.InitVars()
			Else
				Me.ReadXml(reader)
				Me.InitVars()
			End If
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
			Dim stream As New System.IO.MemoryStream()
			Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
			stream.Position = 0
			Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Friend Sub InitVars()
			Me.InitVars(True)
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Friend Sub InitVars(ByVal initTable As Boolean)
			Me.tableCars = (CType(MyBase.Tables("Cars"), CarsDataTable))
			If (initTable = True) Then
				If (Me.tableCars IsNot Nothing) Then
					Me.tableCars.InitVars()
				End If
			End If
			Me.tableCarScheduling = (CType(MyBase.Tables("CarScheduling"), CarSchedulingDataTable))
			If (initTable = True) Then
				If (Me.tableCarScheduling IsNot Nothing) Then
					Me.tableCarScheduling.InitVars()
				End If
			End If
			Me.relationCarsCarScheduling = Me.Relations("CarsCarScheduling")
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Private Sub InitClass()
			Me.DataSetName = "CarsDBDataSet"
			Me.Prefix = ""
			Me.Namespace = "http://tempuri.org/CarsDBDataSet.xsd"
			Me.EnforceConstraints = True
			Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
			Me.tableCars = New CarsDataTable()
			MyBase.Tables.Add(Me.tableCars)
			Me.tableCarScheduling = New CarSchedulingDataTable()
			MyBase.Tables.Add(Me.tableCarScheduling)
			Me.relationCarsCarScheduling = New System.Data.DataRelation("CarsCarScheduling", New System.Data.DataColumn() { Me.tableCars.IDColumn}, New System.Data.DataColumn() { Me.tableCarScheduling.CarIdColumn}, False)
			Me.Relations.Add(Me.relationCarsCarScheduling)
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Private Function ShouldSerializeCars() As Boolean
			Return False
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Private Function ShouldSerializeCarScheduling() As Boolean
			Return False
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
			If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
				Me.InitVars()
			End If
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
			Dim ds As New CarsDBDataSet()
			Dim type As New System.Xml.Schema.XmlSchemaComplexType()
			Dim sequence As New System.Xml.Schema.XmlSchemaSequence()
			Dim any As New System.Xml.Schema.XmlSchemaAny()
			any.Namespace = ds.Namespace
			sequence.Items.Add(any)
			type.Particle = sequence
			Dim dsSchema As System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
			If xs.Contains(dsSchema.TargetNamespace) Then
				Dim s1 As New System.IO.MemoryStream()
				Dim s2 As New System.IO.MemoryStream()
				Try
					Dim schema As System.Xml.Schema.XmlSchema = Nothing
					dsSchema.Write(s1)
					Dim schemas As System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator()
					Do While schemas.MoveNext()
						schema = (CType(schemas.Current, System.Xml.Schema.XmlSchema))
						s2.SetLength(0)
						schema.Write(s2)
						If (s1.Length = s2.Length) Then
							s1.Position = 0
							s2.Position = 0
							Do While ((s1.Position <> s1.Length) AndAlso (s1.ReadByte() = s2.ReadByte()))

							Loop
							If (s1.Position = s1.Length) Then
								Return type
							End If
						End If
					Loop
				Finally
					If (s1 IsNot Nothing) Then
						s1.Close()
					End If
					If (s2 IsNot Nothing) Then
						s2.Close()
					End If
				End Try
			End If
			xs.Add(dsSchema)
			Return type
		End Function

		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Public Delegate Sub CarsRowChangeEventHandler(ByVal sender As Object, ByVal e As CarsRowChangeEvent)

		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Public Delegate Sub CarSchedulingRowChangeEventHandler(ByVal sender As Object, ByVal e As CarSchedulingRowChangeEvent)

		''' <summary>
		'''Represents the strongly named DataTable class.
		'''</summary>
		<System.Serializable()>
		<System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>
		Partial Public Class CarsDataTable
			Inherits System.Data.TypedTableBase(Of CarsRow)

			Private columnID As System.Data.DataColumn

			Private columnTrademark As System.Data.DataColumn

			Private columnModel As System.Data.DataColumn

			Private columnHP As System.Data.DataColumn

			Private columnLiter As System.Data.DataColumn

			Private columnCyl As System.Data.DataColumn

			Private columnTransmissSpeedCount As System.Data.DataColumn

			Private columnTransmissAutomatic As System.Data.DataColumn

			Private columnMPG_City As System.Data.DataColumn

			Private columnMPG_Highway As System.Data.DataColumn

			Private columnCategory As System.Data.DataColumn

			Private columnDescription As System.Data.DataColumn

			Private columnHyperlink As System.Data.DataColumn

			Private columnPicture As System.Data.DataColumn

			Private columnPrice As System.Data.DataColumn

			Private columnRtfContent As System.Data.DataColumn

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Sub New()
				Me.TableName = "Cars"
				Me.BeginInit()
				Me.InitClass()
				Me.EndInit()
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Friend Sub New(ByVal table As System.Data.DataTable)
				Me.TableName = table.TableName
				If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
					Me.CaseSensitive = table.CaseSensitive
				End If
				If (table.Locale.ToString() <> table.DataSet.Locale.ToString()) Then
					Me.Locale = table.Locale
				End If
				If (table.Namespace <> table.DataSet.Namespace) Then
					Me.Namespace = table.Namespace
				End If
				Me.Prefix = table.Prefix
				Me.MinimumCapacity = table.MinimumCapacity
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
				MyBase.New(info, context)
				Me.InitVars()
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public ReadOnly Property IDColumn() As System.Data.DataColumn
				Get
					Return Me.columnID
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public ReadOnly Property TrademarkColumn() As System.Data.DataColumn
				Get
					Return Me.columnTrademark
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public ReadOnly Property ModelColumn() As System.Data.DataColumn
				Get
					Return Me.columnModel
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public ReadOnly Property HPColumn() As System.Data.DataColumn
				Get
					Return Me.columnHP
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public ReadOnly Property LiterColumn() As System.Data.DataColumn
				Get
					Return Me.columnLiter
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public ReadOnly Property CylColumn() As System.Data.DataColumn
				Get
					Return Me.columnCyl
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public ReadOnly Property TransmissSpeedCountColumn() As System.Data.DataColumn
				Get
					Return Me.columnTransmissSpeedCount
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public ReadOnly Property TransmissAutomaticColumn() As System.Data.DataColumn
				Get
					Return Me.columnTransmissAutomatic
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public ReadOnly Property MPG_CityColumn() As System.Data.DataColumn
				Get
					Return Me.columnMPG_City
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public ReadOnly Property MPG_HighwayColumn() As System.Data.DataColumn
				Get
					Return Me.columnMPG_Highway
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public ReadOnly Property CategoryColumn() As System.Data.DataColumn
				Get
					Return Me.columnCategory
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public ReadOnly Property DescriptionColumn() As System.Data.DataColumn
				Get
					Return Me.columnDescription
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public ReadOnly Property HyperlinkColumn() As System.Data.DataColumn
				Get
					Return Me.columnHyperlink
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public ReadOnly Property PictureColumn() As System.Data.DataColumn
				Get
					Return Me.columnPicture
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public ReadOnly Property PriceColumn() As System.Data.DataColumn
				Get
					Return Me.columnPrice
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public ReadOnly Property RtfContentColumn() As System.Data.DataColumn
				Get
					Return Me.columnRtfContent
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			<System.ComponentModel.Browsable(False)>
			Public ReadOnly Overloads Property Count() As Integer
				Get
					Return Me.Rows.Count
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Default Public ReadOnly Property Item(ByVal index As Integer) As CarsRow
				Get
					Return (CType(Me.Rows(index), CarsRow))
				End Get
			End Property

			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Event CarsRowChanging As CarsRowChangeEventHandler

			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Event CarsRowChanged As CarsRowChangeEventHandler

			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Event CarsRowDeleting As CarsRowChangeEventHandler

			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Event CarsRowDeleted As CarsRowChangeEventHandler

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Sub AddCarsRow(ByVal row As CarsRow)
				Me.Rows.Add(row)
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Function AddCarsRow(ByVal Trademark As String, ByVal Model As String, ByVal HP As Short, ByVal Liter As Double, ByVal Cyl As Byte, ByVal TransmissSpeedCount As Byte, ByVal TransmissAutomatic As String, ByVal MPG_City As Byte, ByVal MPG_Highway As Byte, ByVal Category As String, ByVal Description As String, ByVal Hyperlink As String, ByVal Picture() As Byte, ByVal Price As Decimal, ByVal RtfContent As String) As CarsRow
				Dim rowCarsRow As CarsRow = (CType(Me.NewRow(), CarsRow))
				Dim columnValuesArray() As Object = { Nothing, Trademark, Model, HP, Liter, Cyl, TransmissSpeedCount, TransmissAutomatic, MPG_City, MPG_Highway, Category, Description, Hyperlink, Picture, Price, RtfContent}
				rowCarsRow.ItemArray = columnValuesArray
				Me.Rows.Add(rowCarsRow)
				Return rowCarsRow
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Function FindByID(ByVal ID As Integer) As CarsRow
				Return (CType(Me.Rows.Find(New Object() { ID}), CarsRow))
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Overrides Function Clone() As System.Data.DataTable
				Dim cln As CarsDataTable = (CType(MyBase.Clone(), CarsDataTable))
				cln.InitVars()
				Return cln
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Protected Overrides Function CreateInstance() As System.Data.DataTable
				Return New CarsDataTable()
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Friend Sub InitVars()
				Me.columnID = MyBase.Columns("ID")
				Me.columnTrademark = MyBase.Columns("Trademark")
				Me.columnModel = MyBase.Columns("Model")
				Me.columnHP = MyBase.Columns("HP")
				Me.columnLiter = MyBase.Columns("Liter")
				Me.columnCyl = MyBase.Columns("Cyl")
				Me.columnTransmissSpeedCount = MyBase.Columns("TransmissSpeedCount")
				Me.columnTransmissAutomatic = MyBase.Columns("TransmissAutomatic")
				Me.columnMPG_City = MyBase.Columns("MPG_City")
				Me.columnMPG_Highway = MyBase.Columns("MPG_Highway")
				Me.columnCategory = MyBase.Columns("Category")
				Me.columnDescription = MyBase.Columns("Description")
				Me.columnHyperlink = MyBase.Columns("Hyperlink")
				Me.columnPicture = MyBase.Columns("Picture")
				Me.columnPrice = MyBase.Columns("Price")
				Me.columnRtfContent = MyBase.Columns("RtfContent")
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Private Sub InitClass()
				Me.columnID = New System.Data.DataColumn("ID", GetType(Integer), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnID)
				Me.columnTrademark = New System.Data.DataColumn("Trademark", GetType(String), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnTrademark)
				Me.columnModel = New System.Data.DataColumn("Model", GetType(String), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnModel)
				Me.columnHP = New System.Data.DataColumn("HP", GetType(Short), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnHP)
				Me.columnLiter = New System.Data.DataColumn("Liter", GetType(Double), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnLiter)
				Me.columnCyl = New System.Data.DataColumn("Cyl", GetType(Byte), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnCyl)
				Me.columnTransmissSpeedCount = New System.Data.DataColumn("TransmissSpeedCount", GetType(Byte), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnTransmissSpeedCount)
				Me.columnTransmissAutomatic = New System.Data.DataColumn("TransmissAutomatic", GetType(String), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnTransmissAutomatic)
				Me.columnMPG_City = New System.Data.DataColumn("MPG_City", GetType(Byte), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnMPG_City)
				Me.columnMPG_Highway = New System.Data.DataColumn("MPG_Highway", GetType(Byte), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnMPG_Highway)
				Me.columnCategory = New System.Data.DataColumn("Category", GetType(String), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnCategory)
				Me.columnDescription = New System.Data.DataColumn("Description", GetType(String), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnDescription)
				Me.columnHyperlink = New System.Data.DataColumn("Hyperlink", GetType(String), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnHyperlink)
				Me.columnPicture = New System.Data.DataColumn("Picture", GetType(Byte()), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnPicture)
				Me.columnPrice = New System.Data.DataColumn("Price", GetType(Decimal), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnPrice)
				Me.columnRtfContent = New System.Data.DataColumn("RtfContent", GetType(String), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnRtfContent)
				Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() { Me.columnID}, True))
				Me.columnID.AutoIncrement = True
				Me.columnID.AllowDBNull = False
				Me.columnID.Unique = True
				Me.columnTrademark.MaxLength = 50
				Me.columnModel.MaxLength = 50
				Me.columnTransmissAutomatic.MaxLength = 3
				Me.columnCategory.MaxLength = 7
				Me.columnDescription.MaxLength = 536870910
				Me.columnHyperlink.MaxLength = 50
				Me.columnRtfContent.MaxLength = 536870910
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Function NewCarsRow() As CarsRow
				Return (CType(Me.NewRow(), CarsRow))
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
				Return New CarsRow(builder)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Protected Overrides Function GetRowType() As System.Type
				Return GetType(CarsRow)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
				MyBase.OnRowChanged(e)
				RaiseEvent CarsRowChanged(Me, New CarsRowChangeEvent((CType(e.Row, CarsRow)), e.Action))
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
				MyBase.OnRowChanging(e)
				RaiseEvent CarsRowChanging(Me, New CarsRowChangeEvent((CType(e.Row, CarsRow)), e.Action))
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
				MyBase.OnRowDeleted(e)
				RaiseEvent CarsRowDeleted(Me, New CarsRowChangeEvent((CType(e.Row, CarsRow)), e.Action))
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
				MyBase.OnRowDeleting(e)
				RaiseEvent CarsRowDeleting(Me, New CarsRowChangeEvent((CType(e.Row, CarsRow)), e.Action))
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Sub RemoveCarsRow(ByVal row As CarsRow)
				Me.Rows.Remove(row)
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
				Dim type As New System.Xml.Schema.XmlSchemaComplexType()
				Dim sequence As New System.Xml.Schema.XmlSchemaSequence()
				Dim ds As New CarsDBDataSet()
				Dim any1 As New System.Xml.Schema.XmlSchemaAny()
				any1.Namespace = "http://www.w3.org/2001/XMLSchema"
				any1.MinOccurs = New Decimal(0)
				any1.MaxOccurs = Decimal.MaxValue
				any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
				sequence.Items.Add(any1)
				Dim any2 As New System.Xml.Schema.XmlSchemaAny()
				any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
				any2.MinOccurs = New Decimal(1)
				any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
				sequence.Items.Add(any2)
				Dim attribute1 As New System.Xml.Schema.XmlSchemaAttribute()
				attribute1.Name = "namespace"
				attribute1.FixedValue = ds.Namespace
				type.Attributes.Add(attribute1)
				Dim attribute2 As New System.Xml.Schema.XmlSchemaAttribute()
				attribute2.Name = "tableTypeName"
				attribute2.FixedValue = "CarsDataTable"
				type.Attributes.Add(attribute2)
				type.Particle = sequence
				Dim dsSchema As System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
				If xs.Contains(dsSchema.TargetNamespace) Then
					Dim s1 As New System.IO.MemoryStream()
					Dim s2 As New System.IO.MemoryStream()
					Try
						Dim schema As System.Xml.Schema.XmlSchema = Nothing
						dsSchema.Write(s1)
						Dim schemas As System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator()
						Do While schemas.MoveNext()
							schema = (CType(schemas.Current, System.Xml.Schema.XmlSchema))
							s2.SetLength(0)
							schema.Write(s2)
							If (s1.Length = s2.Length) Then
								s1.Position = 0
								s2.Position = 0
								Do While ((s1.Position <> s1.Length) AndAlso (s1.ReadByte() = s2.ReadByte()))

								Loop
								If (s1.Position = s1.Length) Then
									Return type
								End If
							End If
						Loop
					Finally
						If (s1 IsNot Nothing) Then
							s1.Close()
						End If
						If (s2 IsNot Nothing) Then
							s2.Close()
						End If
					End Try
				End If
				xs.Add(dsSchema)
				Return type
			End Function
		End Class

		''' <summary>
		'''Represents the strongly named DataTable class.
		'''</summary>
		<System.Serializable()>
		<System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>
		Partial Public Class CarSchedulingDataTable
			Inherits System.Data.TypedTableBase(Of CarSchedulingRow)

			Private columnID As System.Data.DataColumn

			Private columnCarId As System.Data.DataColumn

			Private columnUserId As System.Data.DataColumn

			Private columnStatus As System.Data.DataColumn

			Private columnSubject As System.Data.DataColumn

			Private columnDescription As System.Data.DataColumn

			Private columnLabel As System.Data.DataColumn

			Private columnStartTime As System.Data.DataColumn

			Private columnEndTime As System.Data.DataColumn

			Private columnLocation As System.Data.DataColumn

			Private columnAllDay As System.Data.DataColumn

			Private columnEventType As System.Data.DataColumn

			Private columnRecurrenceInfo As System.Data.DataColumn

			Private columnReminderInfo As System.Data.DataColumn

			Private columnPrice As System.Data.DataColumn

			Private columnContactInfo As System.Data.DataColumn

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Sub New()
				Me.TableName = "CarScheduling"
				Me.BeginInit()
				Me.InitClass()
				Me.EndInit()
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Friend Sub New(ByVal table As System.Data.DataTable)
				Me.TableName = table.TableName
				If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
					Me.CaseSensitive = table.CaseSensitive
				End If
				If (table.Locale.ToString() <> table.DataSet.Locale.ToString()) Then
					Me.Locale = table.Locale
				End If
				If (table.Namespace <> table.DataSet.Namespace) Then
					Me.Namespace = table.Namespace
				End If
				Me.Prefix = table.Prefix
				Me.MinimumCapacity = table.MinimumCapacity
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
				MyBase.New(info, context)
				Me.InitVars()
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public ReadOnly Property IDColumn() As System.Data.DataColumn
				Get
					Return Me.columnID
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public ReadOnly Property CarIdColumn() As System.Data.DataColumn
				Get
					Return Me.columnCarId
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public ReadOnly Property UserIdColumn() As System.Data.DataColumn
				Get
					Return Me.columnUserId
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public ReadOnly Property StatusColumn() As System.Data.DataColumn
				Get
					Return Me.columnStatus
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public ReadOnly Property SubjectColumn() As System.Data.DataColumn
				Get
					Return Me.columnSubject
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public ReadOnly Property DescriptionColumn() As System.Data.DataColumn
				Get
					Return Me.columnDescription
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public ReadOnly Property LabelColumn() As System.Data.DataColumn
				Get
					Return Me.columnLabel
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public ReadOnly Property StartTimeColumn() As System.Data.DataColumn
				Get
					Return Me.columnStartTime
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public ReadOnly Property EndTimeColumn() As System.Data.DataColumn
				Get
					Return Me.columnEndTime
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public ReadOnly Property LocationColumn() As System.Data.DataColumn
				Get
					Return Me.columnLocation
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public ReadOnly Property AllDayColumn() As System.Data.DataColumn
				Get
					Return Me.columnAllDay
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public ReadOnly Property EventTypeColumn() As System.Data.DataColumn
				Get
					Return Me.columnEventType
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public ReadOnly Property RecurrenceInfoColumn() As System.Data.DataColumn
				Get
					Return Me.columnRecurrenceInfo
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public ReadOnly Property ReminderInfoColumn() As System.Data.DataColumn
				Get
					Return Me.columnReminderInfo
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public ReadOnly Property PriceColumn() As System.Data.DataColumn
				Get
					Return Me.columnPrice
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public ReadOnly Property ContactInfoColumn() As System.Data.DataColumn
				Get
					Return Me.columnContactInfo
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			<System.ComponentModel.Browsable(False)>
			Public ReadOnly Overloads Property Count() As Integer
				Get
					Return Me.Rows.Count
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Default Public ReadOnly Property Item(ByVal index As Integer) As CarSchedulingRow
				Get
					Return (CType(Me.Rows(index), CarSchedulingRow))
				End Get
			End Property

			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Event CarSchedulingRowChanging As CarSchedulingRowChangeEventHandler

			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Event CarSchedulingRowChanged As CarSchedulingRowChangeEventHandler

			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Event CarSchedulingRowDeleting As CarSchedulingRowChangeEventHandler

			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Event CarSchedulingRowDeleted As CarSchedulingRowChangeEventHandler

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Sub AddCarSchedulingRow(ByVal row As CarSchedulingRow)
				Me.Rows.Add(row)
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Function AddCarSchedulingRow(ByVal parentCarsRowByCarsCarScheduling As CarsRow, ByVal UserId As Integer, ByVal Status As Integer, ByVal Subject As String, ByVal Description As String, ByVal Label As Integer, ByVal StartTime As DateTime, ByVal EndTime As DateTime, ByVal Location As String, ByVal AllDay As Boolean, ByVal EventType As Integer, ByVal RecurrenceInfo As String, ByVal ReminderInfo As String, ByVal Price As Decimal, ByVal ContactInfo As String) As CarSchedulingRow
				Dim rowCarSchedulingRow As CarSchedulingRow = (CType(Me.NewRow(), CarSchedulingRow))
				Dim columnValuesArray() As Object = { Nothing, Nothing, UserId, Status, Subject, Description, Label, StartTime, EndTime, Location, AllDay, EventType, RecurrenceInfo, ReminderInfo, Price, ContactInfo}
				If (parentCarsRowByCarsCarScheduling IsNot Nothing) Then
					columnValuesArray(1) = parentCarsRowByCarsCarScheduling(0)
				End If
				rowCarSchedulingRow.ItemArray = columnValuesArray
				Me.Rows.Add(rowCarSchedulingRow)
				Return rowCarSchedulingRow
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Function FindByID(ByVal ID As Integer) As CarSchedulingRow
				Return (CType(Me.Rows.Find(New Object() { ID}), CarSchedulingRow))
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Overrides Function Clone() As System.Data.DataTable
				Dim cln As CarSchedulingDataTable = (CType(MyBase.Clone(), CarSchedulingDataTable))
				cln.InitVars()
				Return cln
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Protected Overrides Function CreateInstance() As System.Data.DataTable
				Return New CarSchedulingDataTable()
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Friend Sub InitVars()
				Me.columnID = MyBase.Columns("ID")
				Me.columnCarId = MyBase.Columns("CarId")
				Me.columnUserId = MyBase.Columns("UserId")
				Me.columnStatus = MyBase.Columns("Status")
				Me.columnSubject = MyBase.Columns("Subject")
				Me.columnDescription = MyBase.Columns("Description")
				Me.columnLabel = MyBase.Columns("Label")
				Me.columnStartTime = MyBase.Columns("StartTime")
				Me.columnEndTime = MyBase.Columns("EndTime")
				Me.columnLocation = MyBase.Columns("Location")
				Me.columnAllDay = MyBase.Columns("AllDay")
				Me.columnEventType = MyBase.Columns("EventType")
				Me.columnRecurrenceInfo = MyBase.Columns("RecurrenceInfo")
				Me.columnReminderInfo = MyBase.Columns("ReminderInfo")
				Me.columnPrice = MyBase.Columns("Price")
				Me.columnContactInfo = MyBase.Columns("ContactInfo")
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Private Sub InitClass()
				Me.columnID = New System.Data.DataColumn("ID", GetType(Integer), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnID)
				Me.columnCarId = New System.Data.DataColumn("CarId", GetType(Integer), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnCarId)
				Me.columnUserId = New System.Data.DataColumn("UserId", GetType(Integer), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnUserId)
				Me.columnStatus = New System.Data.DataColumn("Status", GetType(Integer), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnStatus)
				Me.columnSubject = New System.Data.DataColumn("Subject", GetType(String), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnSubject)
				Me.columnDescription = New System.Data.DataColumn("Description", GetType(String), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnDescription)
				Me.columnLabel = New System.Data.DataColumn("Label", GetType(Integer), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnLabel)
				Me.columnStartTime = New System.Data.DataColumn("StartTime", GetType(DateTime), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnStartTime)
				Me.columnEndTime = New System.Data.DataColumn("EndTime", GetType(DateTime), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnEndTime)
				Me.columnLocation = New System.Data.DataColumn("Location", GetType(String), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnLocation)
				Me.columnAllDay = New System.Data.DataColumn("AllDay", GetType(Boolean), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnAllDay)
				Me.columnEventType = New System.Data.DataColumn("EventType", GetType(Integer), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnEventType)
				Me.columnRecurrenceInfo = New System.Data.DataColumn("RecurrenceInfo", GetType(String), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnRecurrenceInfo)
				Me.columnReminderInfo = New System.Data.DataColumn("ReminderInfo", GetType(String), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnReminderInfo)
				Me.columnPrice = New System.Data.DataColumn("Price", GetType(Decimal), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnPrice)
				Me.columnContactInfo = New System.Data.DataColumn("ContactInfo", GetType(String), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnContactInfo)
				Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() { Me.columnID}, True))
				Me.columnID.AutoIncrement = True
				Me.columnID.AllowDBNull = False
				Me.columnID.Unique = True
				Me.columnSubject.MaxLength = 50
				Me.columnDescription.MaxLength = 536870910
				Me.columnLocation.MaxLength = 50
				Me.columnRecurrenceInfo.MaxLength = 536870910
				Me.columnReminderInfo.MaxLength = 536870910
				Me.columnContactInfo.MaxLength = 536870910
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Function NewCarSchedulingRow() As CarSchedulingRow
				Return (CType(Me.NewRow(), CarSchedulingRow))
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
				Return New CarSchedulingRow(builder)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Protected Overrides Function GetRowType() As System.Type
				Return GetType(CarSchedulingRow)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
				MyBase.OnRowChanged(e)
				RaiseEvent CarSchedulingRowChanged(Me, New CarSchedulingRowChangeEvent((CType(e.Row, CarSchedulingRow)), e.Action))
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
				MyBase.OnRowChanging(e)
				RaiseEvent CarSchedulingRowChanging(Me, New CarSchedulingRowChangeEvent((CType(e.Row, CarSchedulingRow)), e.Action))
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
				MyBase.OnRowDeleted(e)
				RaiseEvent CarSchedulingRowDeleted(Me, New CarSchedulingRowChangeEvent((CType(e.Row, CarSchedulingRow)), e.Action))
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
				MyBase.OnRowDeleting(e)
				RaiseEvent CarSchedulingRowDeleting(Me, New CarSchedulingRowChangeEvent((CType(e.Row, CarSchedulingRow)), e.Action))
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Sub RemoveCarSchedulingRow(ByVal row As CarSchedulingRow)
				Me.Rows.Remove(row)
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
				Dim type As New System.Xml.Schema.XmlSchemaComplexType()
				Dim sequence As New System.Xml.Schema.XmlSchemaSequence()
				Dim ds As New CarsDBDataSet()
				Dim any1 As New System.Xml.Schema.XmlSchemaAny()
				any1.Namespace = "http://www.w3.org/2001/XMLSchema"
				any1.MinOccurs = New Decimal(0)
				any1.MaxOccurs = Decimal.MaxValue
				any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
				sequence.Items.Add(any1)
				Dim any2 As New System.Xml.Schema.XmlSchemaAny()
				any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
				any2.MinOccurs = New Decimal(1)
				any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
				sequence.Items.Add(any2)
				Dim attribute1 As New System.Xml.Schema.XmlSchemaAttribute()
				attribute1.Name = "namespace"
				attribute1.FixedValue = ds.Namespace
				type.Attributes.Add(attribute1)
				Dim attribute2 As New System.Xml.Schema.XmlSchemaAttribute()
				attribute2.Name = "tableTypeName"
				attribute2.FixedValue = "CarSchedulingDataTable"
				type.Attributes.Add(attribute2)
				type.Particle = sequence
				Dim dsSchema As System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
				If xs.Contains(dsSchema.TargetNamespace) Then
					Dim s1 As New System.IO.MemoryStream()
					Dim s2 As New System.IO.MemoryStream()
					Try
						Dim schema As System.Xml.Schema.XmlSchema = Nothing
						dsSchema.Write(s1)
						Dim schemas As System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator()
						Do While schemas.MoveNext()
							schema = (CType(schemas.Current, System.Xml.Schema.XmlSchema))
							s2.SetLength(0)
							schema.Write(s2)
							If (s1.Length = s2.Length) Then
								s1.Position = 0
								s2.Position = 0
								Do While ((s1.Position <> s1.Length) AndAlso (s1.ReadByte() = s2.ReadByte()))

								Loop
								If (s1.Position = s1.Length) Then
									Return type
								End If
							End If
						Loop
					Finally
						If (s1 IsNot Nothing) Then
							s1.Close()
						End If
						If (s2 IsNot Nothing) Then
							s2.Close()
						End If
					End Try
				End If
				xs.Add(dsSchema)
				Return type
			End Function
		End Class

		''' <summary>
		'''Represents strongly named DataRow class.
		'''</summary>
		Partial Public Class CarsRow
			Inherits System.Data.DataRow

			Private tableCars As CarsDataTable

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
				MyBase.New(rb)
				Me.tableCars = (CType(Me.Table, CarsDataTable))
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Property ID() As Integer
				Get
					Return (CInt(Me(Me.tableCars.IDColumn)))
				End Get
				Set(ByVal value As Integer)
					Me(Me.tableCars.IDColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Property Trademark() As String
				Get
					Try
						Return (CStr(Me(Me.tableCars.TrademarkColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'Trademark' in table 'Cars' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCars.TrademarkColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Property Model() As String
				Get
					Try
						Return (CStr(Me(Me.tableCars.ModelColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'Model' in table 'Cars' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCars.ModelColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Property HP() As Short
				Get
					Try
						Return (CShort(Me(Me.tableCars.HPColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'HP' in table 'Cars' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Short)
					Me(Me.tableCars.HPColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Property Liter() As Double
				Get
					Try
						Return (CDbl(Me(Me.tableCars.LiterColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'Liter' in table 'Cars' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Double)
					Me(Me.tableCars.LiterColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Property Cyl() As Byte
				Get
					Try
						Return (CByte(Me(Me.tableCars.CylColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'Cyl' in table 'Cars' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Byte)
					Me(Me.tableCars.CylColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Property TransmissSpeedCount() As Byte
				Get
					Try
						Return (CByte(Me(Me.tableCars.TransmissSpeedCountColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'TransmissSpeedCount' in table 'Cars' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Byte)
					Me(Me.tableCars.TransmissSpeedCountColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Property TransmissAutomatic() As String
				Get
					Try
						Return (CStr(Me(Me.tableCars.TransmissAutomaticColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'TransmissAutomatic' in table 'Cars' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCars.TransmissAutomaticColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Property MPG_City() As Byte
				Get
					Try
						Return (CByte(Me(Me.tableCars.MPG_CityColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'MPG_City' in table 'Cars' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Byte)
					Me(Me.tableCars.MPG_CityColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Property MPG_Highway() As Byte
				Get
					Try
						Return (CByte(Me(Me.tableCars.MPG_HighwayColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'MPG_Highway' in table 'Cars' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Byte)
					Me(Me.tableCars.MPG_HighwayColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Property Category() As String
				Get
					Try
						Return (CStr(Me(Me.tableCars.CategoryColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'Category' in table 'Cars' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCars.CategoryColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Property Description() As String
				Get
					Try
						Return (CStr(Me(Me.tableCars.DescriptionColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'Description' in table 'Cars' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCars.DescriptionColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Property Hyperlink() As String
				Get
					Try
						Return (CStr(Me(Me.tableCars.HyperlinkColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'Hyperlink' in table 'Cars' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCars.HyperlinkColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Property Picture() As Byte()
				Get
					Try
						Return (CType(Me(Me.tableCars.PictureColumn), Byte()))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'Picture' in table 'Cars' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Byte())
					Me(Me.tableCars.PictureColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Property Price() As Decimal
				Get
					Try
						Return (CDec(Me(Me.tableCars.PriceColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'Price' in table 'Cars' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Decimal)
					Me(Me.tableCars.PriceColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Property RtfContent() As String
				Get
					Try
						Return (CStr(Me(Me.tableCars.RtfContentColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'RtfContent' in table 'Cars' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCars.RtfContentColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Function IsTrademarkNull() As Boolean
				Return Me.IsNull(Me.tableCars.TrademarkColumn)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Sub SetTrademarkNull()
				Me(Me.tableCars.TrademarkColumn) = System.Convert.DBNull
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Function IsModelNull() As Boolean
				Return Me.IsNull(Me.tableCars.ModelColumn)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Sub SetModelNull()
				Me(Me.tableCars.ModelColumn) = System.Convert.DBNull
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Function IsHPNull() As Boolean
				Return Me.IsNull(Me.tableCars.HPColumn)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Sub SetHPNull()
				Me(Me.tableCars.HPColumn) = System.Convert.DBNull
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Function IsLiterNull() As Boolean
				Return Me.IsNull(Me.tableCars.LiterColumn)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Sub SetLiterNull()
				Me(Me.tableCars.LiterColumn) = System.Convert.DBNull
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Function IsCylNull() As Boolean
				Return Me.IsNull(Me.tableCars.CylColumn)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Sub SetCylNull()
				Me(Me.tableCars.CylColumn) = System.Convert.DBNull
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Function IsTransmissSpeedCountNull() As Boolean
				Return Me.IsNull(Me.tableCars.TransmissSpeedCountColumn)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Sub SetTransmissSpeedCountNull()
				Me(Me.tableCars.TransmissSpeedCountColumn) = System.Convert.DBNull
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Function IsTransmissAutomaticNull() As Boolean
				Return Me.IsNull(Me.tableCars.TransmissAutomaticColumn)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Sub SetTransmissAutomaticNull()
				Me(Me.tableCars.TransmissAutomaticColumn) = System.Convert.DBNull
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Function IsMPG_CityNull() As Boolean
				Return Me.IsNull(Me.tableCars.MPG_CityColumn)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Sub SetMPG_CityNull()
				Me(Me.tableCars.MPG_CityColumn) = System.Convert.DBNull
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Function IsMPG_HighwayNull() As Boolean
				Return Me.IsNull(Me.tableCars.MPG_HighwayColumn)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Sub SetMPG_HighwayNull()
				Me(Me.tableCars.MPG_HighwayColumn) = System.Convert.DBNull
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Function IsCategoryNull() As Boolean
				Return Me.IsNull(Me.tableCars.CategoryColumn)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Sub SetCategoryNull()
				Me(Me.tableCars.CategoryColumn) = System.Convert.DBNull
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Function IsDescriptionNull() As Boolean
				Return Me.IsNull(Me.tableCars.DescriptionColumn)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Sub SetDescriptionNull()
				Me(Me.tableCars.DescriptionColumn) = System.Convert.DBNull
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Function IsHyperlinkNull() As Boolean
				Return Me.IsNull(Me.tableCars.HyperlinkColumn)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Sub SetHyperlinkNull()
				Me(Me.tableCars.HyperlinkColumn) = System.Convert.DBNull
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Function IsPictureNull() As Boolean
				Return Me.IsNull(Me.tableCars.PictureColumn)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Sub SetPictureNull()
				Me(Me.tableCars.PictureColumn) = System.Convert.DBNull
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Function IsPriceNull() As Boolean
				Return Me.IsNull(Me.tableCars.PriceColumn)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Sub SetPriceNull()
				Me(Me.tableCars.PriceColumn) = System.Convert.DBNull
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Function IsRtfContentNull() As Boolean
				Return Me.IsNull(Me.tableCars.RtfContentColumn)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Sub SetRtfContentNull()
				Me(Me.tableCars.RtfContentColumn) = System.Convert.DBNull
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Function GetCarSchedulingRows() As CarSchedulingRow()
				If (Me.Table.ChildRelations("CarsCarScheduling") Is Nothing) Then
					Return New CarSchedulingRow(){}
				Else
					Return (CType(MyBase.GetChildRows(Me.Table.ChildRelations("CarsCarScheduling")), CarSchedulingRow()))
				End If
			End Function
		End Class

		''' <summary>
		'''Represents strongly named DataRow class.
		'''</summary>
		Partial Public Class CarSchedulingRow
			Inherits System.Data.DataRow

			Private tableCarScheduling As CarSchedulingDataTable

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
				MyBase.New(rb)
				Me.tableCarScheduling = (CType(Me.Table, CarSchedulingDataTable))
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Property ID() As Integer
				Get
					Return (CInt(Me(Me.tableCarScheduling.IDColumn)))
				End Get
				Set(ByVal value As Integer)
					Me(Me.tableCarScheduling.IDColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Property CarId() As Integer
				Get
					Try
						Return (CInt(Me(Me.tableCarScheduling.CarIdColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'CarId' in table 'CarScheduling' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Integer)
					Me(Me.tableCarScheduling.CarIdColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Property UserId() As Integer
				Get
					Try
						Return (CInt(Me(Me.tableCarScheduling.UserIdColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'UserId' in table 'CarScheduling' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Integer)
					Me(Me.tableCarScheduling.UserIdColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Property Status() As Integer
				Get
					Try
						Return (CInt(Me(Me.tableCarScheduling.StatusColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'Status' in table 'CarScheduling' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Integer)
					Me(Me.tableCarScheduling.StatusColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Property Subject() As String
				Get
					Try
						Return (CStr(Me(Me.tableCarScheduling.SubjectColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'Subject' in table 'CarScheduling' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCarScheduling.SubjectColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Property Description() As String
				Get
					Try
						Return (CStr(Me(Me.tableCarScheduling.DescriptionColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'Description' in table 'CarScheduling' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCarScheduling.DescriptionColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Property Label() As Integer
				Get
					Try
						Return (CInt(Me(Me.tableCarScheduling.LabelColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'Label' in table 'CarScheduling' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Integer)
					Me(Me.tableCarScheduling.LabelColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Property StartTime() As DateTime
				Get
					Try
						Return (CDate(Me(Me.tableCarScheduling.StartTimeColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'StartTime' in table 'CarScheduling' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As DateTime)
					Me(Me.tableCarScheduling.StartTimeColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Property EndTime() As DateTime
				Get
					Try
						Return (CDate(Me(Me.tableCarScheduling.EndTimeColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'EndTime' in table 'CarScheduling' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As DateTime)
					Me(Me.tableCarScheduling.EndTimeColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Property Location() As String
				Get
					Try
						Return (CStr(Me(Me.tableCarScheduling.LocationColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'Location' in table 'CarScheduling' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCarScheduling.LocationColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Property AllDay() As Boolean
				Get
					Try
						Return (CBool(Me(Me.tableCarScheduling.AllDayColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'AllDay' in table 'CarScheduling' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Boolean)
					Me(Me.tableCarScheduling.AllDayColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Property EventType() As Integer
				Get
					Try
						Return (CInt(Me(Me.tableCarScheduling.EventTypeColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'EventType' in table 'CarScheduling' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Integer)
					Me(Me.tableCarScheduling.EventTypeColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Property RecurrenceInfo() As String
				Get
					Try
						Return (CStr(Me(Me.tableCarScheduling.RecurrenceInfoColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'RecurrenceInfo' in table 'CarScheduling' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCarScheduling.RecurrenceInfoColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Property ReminderInfo() As String
				Get
					Try
						Return (CStr(Me(Me.tableCarScheduling.ReminderInfoColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'ReminderInfo' in table 'CarScheduling' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCarScheduling.ReminderInfoColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Property Price() As Decimal
				Get
					Try
						Return (CDec(Me(Me.tableCarScheduling.PriceColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'Price' in table 'CarScheduling' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Decimal)
					Me(Me.tableCarScheduling.PriceColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Property ContactInfo() As String
				Get
					Try
						Return (CStr(Me(Me.tableCarScheduling.ContactInfoColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'ContactInfo' in table 'CarScheduling' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCarScheduling.ContactInfoColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Property CarsRow() As CarsRow
				Get
					Return (CType(Me.GetParentRow(Me.Table.ParentRelations("CarsCarScheduling")), CarsRow))
				End Get
				Set(ByVal value As CarsRow)
					Me.SetParentRow(value, Me.Table.ParentRelations("CarsCarScheduling"))
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Function IsCarIdNull() As Boolean
				Return Me.IsNull(Me.tableCarScheduling.CarIdColumn)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Sub SetCarIdNull()
				Me(Me.tableCarScheduling.CarIdColumn) = System.Convert.DBNull
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Function IsUserIdNull() As Boolean
				Return Me.IsNull(Me.tableCarScheduling.UserIdColumn)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Sub SetUserIdNull()
				Me(Me.tableCarScheduling.UserIdColumn) = System.Convert.DBNull
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Function IsStatusNull() As Boolean
				Return Me.IsNull(Me.tableCarScheduling.StatusColumn)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Sub SetStatusNull()
				Me(Me.tableCarScheduling.StatusColumn) = System.Convert.DBNull
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Function IsSubjectNull() As Boolean
				Return Me.IsNull(Me.tableCarScheduling.SubjectColumn)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Sub SetSubjectNull()
				Me(Me.tableCarScheduling.SubjectColumn) = System.Convert.DBNull
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Function IsDescriptionNull() As Boolean
				Return Me.IsNull(Me.tableCarScheduling.DescriptionColumn)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Sub SetDescriptionNull()
				Me(Me.tableCarScheduling.DescriptionColumn) = System.Convert.DBNull
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Function IsLabelNull() As Boolean
				Return Me.IsNull(Me.tableCarScheduling.LabelColumn)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Sub SetLabelNull()
				Me(Me.tableCarScheduling.LabelColumn) = System.Convert.DBNull
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Function IsStartTimeNull() As Boolean
				Return Me.IsNull(Me.tableCarScheduling.StartTimeColumn)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Sub SetStartTimeNull()
				Me(Me.tableCarScheduling.StartTimeColumn) = System.Convert.DBNull
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Function IsEndTimeNull() As Boolean
				Return Me.IsNull(Me.tableCarScheduling.EndTimeColumn)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Sub SetEndTimeNull()
				Me(Me.tableCarScheduling.EndTimeColumn) = System.Convert.DBNull
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Function IsLocationNull() As Boolean
				Return Me.IsNull(Me.tableCarScheduling.LocationColumn)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Sub SetLocationNull()
				Me(Me.tableCarScheduling.LocationColumn) = System.Convert.DBNull
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Function IsAllDayNull() As Boolean
				Return Me.IsNull(Me.tableCarScheduling.AllDayColumn)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Sub SetAllDayNull()
				Me(Me.tableCarScheduling.AllDayColumn) = System.Convert.DBNull
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Function IsEventTypeNull() As Boolean
				Return Me.IsNull(Me.tableCarScheduling.EventTypeColumn)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Sub SetEventTypeNull()
				Me(Me.tableCarScheduling.EventTypeColumn) = System.Convert.DBNull
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Function IsRecurrenceInfoNull() As Boolean
				Return Me.IsNull(Me.tableCarScheduling.RecurrenceInfoColumn)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Sub SetRecurrenceInfoNull()
				Me(Me.tableCarScheduling.RecurrenceInfoColumn) = System.Convert.DBNull
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Function IsReminderInfoNull() As Boolean
				Return Me.IsNull(Me.tableCarScheduling.ReminderInfoColumn)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Sub SetReminderInfoNull()
				Me(Me.tableCarScheduling.ReminderInfoColumn) = System.Convert.DBNull
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Function IsPriceNull() As Boolean
				Return Me.IsNull(Me.tableCarScheduling.PriceColumn)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Sub SetPriceNull()
				Me(Me.tableCarScheduling.PriceColumn) = System.Convert.DBNull
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Function IsContactInfoNull() As Boolean
				Return Me.IsNull(Me.tableCarScheduling.ContactInfoColumn)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Sub SetContactInfoNull()
				Me(Me.tableCarScheduling.ContactInfoColumn) = System.Convert.DBNull
			End Sub
		End Class

		''' <summary>
		'''Row event argument class
		'''</summary>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Public Class CarsRowChangeEvent
			Inherits System.EventArgs

			Private eventRow As CarsRow

			Private eventAction As System.Data.DataRowAction

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Sub New(ByVal row As CarsRow, ByVal action As System.Data.DataRowAction)
				Me.eventRow = row
				Me.eventAction = action
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public ReadOnly Property Row() As CarsRow
				Get
					Return Me.eventRow
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public ReadOnly Property Action() As System.Data.DataRowAction
				Get
					Return Me.eventAction
				End Get
			End Property
		End Class

		''' <summary>
		'''Row event argument class
		'''</summary>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Public Class CarSchedulingRowChangeEvent
			Inherits System.EventArgs

			Private eventRow As CarSchedulingRow

			Private eventAction As System.Data.DataRowAction

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Sub New(ByVal row As CarSchedulingRow, ByVal action As System.Data.DataRowAction)
				Me.eventRow = row
				Me.eventAction = action
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public ReadOnly Property Row() As CarSchedulingRow
				Get
					Return Me.eventRow
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public ReadOnly Property Action() As System.Data.DataRowAction
				Get
					Return Me.eventAction
				End Get
			End Property
		End Class
	End Class
End Namespace
Namespace SimpleCustomFields.CarsDBDataSetTableAdapters


	''' <summary>
	'''Represents the connection and commands used to retrieve and save data.
	'''</summary>
	<System.ComponentModel.DesignerCategoryAttribute("code")>
	<System.ComponentModel.ToolboxItem(True)>
	<System.ComponentModel.DataObjectAttribute(True)>
	<System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")>
	<System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
	Partial Public Class CarsTableAdapter
		Inherits System.ComponentModel.Component

		Private _adapter As System.Data.OleDb.OleDbDataAdapter

		Private _connection As System.Data.OleDb.OleDbConnection

		Private _commandCollection() As System.Data.OleDb.OleDbCommand

		Private _clearBeforeFill As Boolean

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Public Sub New()
			Me.ClearBeforeFill = True
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Private ReadOnly Property Adapter() As System.Data.OleDb.OleDbDataAdapter
			Get
				If (Me._adapter Is Nothing) Then
					Me.InitAdapter()
				End If
				Return Me._adapter
			End Get
		End Property

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Friend Property Connection() As System.Data.OleDb.OleDbConnection
			Get
				If (Me._connection Is Nothing) Then
					Me.InitConnection()
				End If
				Return Me._connection
			End Get
			Set(ByVal value As System.Data.OleDb.OleDbConnection)
				Me._connection = value
				If (Me.Adapter.InsertCommand IsNot Nothing) Then
					Me.Adapter.InsertCommand.Connection = value
				End If
				If (Me.Adapter.DeleteCommand IsNot Nothing) Then
					Me.Adapter.DeleteCommand.Connection = value
				End If
				If (Me.Adapter.UpdateCommand IsNot Nothing) Then
					Me.Adapter.UpdateCommand.Connection = value
				End If
				Dim i As Integer = 0
				Do While (i < Me.CommandCollection.Length)
					If (Me.CommandCollection(i) IsNot Nothing) Then
						CType(Me.CommandCollection(i), System.Data.OleDb.OleDbCommand).Connection = value
					End If
					i = (i + 1)
				Loop
			End Set
		End Property

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Protected ReadOnly Property CommandCollection() As System.Data.OleDb.OleDbCommand()
			Get
				If (Me._commandCollection Is Nothing) Then
					Me.InitCommandCollection()
				End If
				Return Me._commandCollection
			End Get
		End Property

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Public Property ClearBeforeFill() As Boolean
			Get
				Return Me._clearBeforeFill
			End Get
			Set(ByVal value As Boolean)
				Me._clearBeforeFill = value
			End Set
		End Property

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Private Sub InitAdapter()
			Me._adapter = New System.Data.OleDb.OleDbDataAdapter()
			Dim tableMapping As New System.Data.Common.DataTableMapping()
			tableMapping.SourceTable = "Table"
			tableMapping.DataSetTable = "Cars"
			tableMapping.ColumnMappings.Add("ID", "ID")
			tableMapping.ColumnMappings.Add("Trademark", "Trademark")
			tableMapping.ColumnMappings.Add("Model", "Model")
			tableMapping.ColumnMappings.Add("HP", "HP")
			tableMapping.ColumnMappings.Add("Liter", "Liter")
			tableMapping.ColumnMappings.Add("Cyl", "Cyl")
			tableMapping.ColumnMappings.Add("TransmissSpeedCount", "TransmissSpeedCount")
			tableMapping.ColumnMappings.Add("TransmissAutomatic", "TransmissAutomatic")
			tableMapping.ColumnMappings.Add("MPG_City", "MPG_City")
			tableMapping.ColumnMappings.Add("MPG_Highway", "MPG_Highway")
			tableMapping.ColumnMappings.Add("Category", "Category")
			tableMapping.ColumnMappings.Add("Description", "Description")
			tableMapping.ColumnMappings.Add("Hyperlink", "Hyperlink")
			tableMapping.ColumnMappings.Add("Picture", "Picture")
			tableMapping.ColumnMappings.Add("Price", "Price")
			tableMapping.ColumnMappings.Add("RtfContent", "RtfContent")
			Me._adapter.TableMappings.Add(tableMapping)
			Me._adapter.DeleteCommand = New System.Data.OleDb.OleDbCommand()
			Me._adapter.DeleteCommand.Connection = Me.Connection
			Me._adapter.DeleteCommand.CommandText = "DELETE FROM `Cars` WHERE ((`ID` = ?) AND ((? = 1 AND `Trademark` IS NULL) OR (`Trademark` = ?)) AND ((? = 1 AND `Model` IS NULL) OR (`Model` = ?)) AND ((? = 1 AND `HP` IS NULL) OR (`HP` = ?)) AND ((? = 1 AND `Liter` IS NULL) OR (`Liter` = ?)) AND ((? = 1 AND `Cyl` IS NULL) OR (`Cyl` = ?)) AND ((? = 1 AND `TransmissSpeedCount` IS NULL) OR (`TransmissSpeedCount` = ?)) AND ((? = 1 AND `TransmissAutomatic` IS NULL) OR (`TransmissAutomatic` = ?)) AND ((? = 1 AND `MPG_City` IS NULL) OR (`MPG_City` = ?)) AND ((? = 1 AND `MPG_Highway` IS NULL) OR (`MPG_Highway` = ?)) AND ((? = 1 AND `Category` IS NULL) OR (`Category` = ?)) AND ((? = 1 AND `Hyperlink` IS NULL) OR (`Hyperlink` = ?)) AND ((? = 1 AND `Price` IS NULL) OR (`Price` = ?)))"
			Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_ID", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ID", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Trademark", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Trademark", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Trademark", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Trademark", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Model", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Model", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Model", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Model", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_HP", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "HP", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_HP", System.Data.OleDb.OleDbType.SmallInt, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "HP", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Liter", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Liter", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Liter", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Liter", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Cyl", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Cyl", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Cyl", System.Data.OleDb.OleDbType.UnsignedTinyInt, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Cyl", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_TransmissSpeedCount", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "TransmissSpeedCount", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_TransmissSpeedCount", System.Data.OleDb.OleDbType.UnsignedTinyInt, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "TransmissSpeedCount", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_TransmissAutomatic", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "TransmissAutomatic", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_TransmissAutomatic", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "TransmissAutomatic", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_MPG_City", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "MPG_City", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_MPG_City", System.Data.OleDb.OleDbType.UnsignedTinyInt, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "MPG_City", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_MPG_Highway", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "MPG_Highway", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_MPG_Highway", System.Data.OleDb.OleDbType.UnsignedTinyInt, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "MPG_Highway", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Category", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Category", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Category", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Category", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Hyperlink", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Hyperlink", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Hyperlink", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Hyperlink", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Price", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Price", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Price", System.Data.OleDb.OleDbType.Currency, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Price", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.InsertCommand = New System.Data.OleDb.OleDbCommand()
			Me._adapter.InsertCommand.Connection = Me.Connection
			Me._adapter.InsertCommand.CommandText = "INSERT INTO `Cars` (`Trademark`, `Model`, `HP`, `Liter`, `Cyl`, `TransmissSpeedCount`, `TransmissAutomatic`, `MPG_City`, `MPG_Highway`, `Category`, `Description`, `Hyperlink`, `Picture`, `Price`, `RtfContent`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
			Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
			Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Trademark", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Trademark", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Model", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Model", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("HP", System.Data.OleDb.OleDbType.SmallInt, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "HP", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Liter", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Liter", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Cyl", System.Data.OleDb.OleDbType.UnsignedTinyInt, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Cyl", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("TransmissSpeedCount", System.Data.OleDb.OleDbType.UnsignedTinyInt, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "TransmissSpeedCount", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("TransmissAutomatic", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "TransmissAutomatic", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("MPG_City", System.Data.OleDb.OleDbType.UnsignedTinyInt, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "MPG_City", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("MPG_Highway", System.Data.OleDb.OleDbType.UnsignedTinyInt, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "MPG_Highway", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Category", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Category", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Description", System.Data.OleDb.OleDbType.LongVarWChar, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Description", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Hyperlink", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Hyperlink", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Picture", System.Data.OleDb.OleDbType.LongVarBinary, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Picture", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Price", System.Data.OleDb.OleDbType.Currency, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Price", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("RtfContent", System.Data.OleDb.OleDbType.LongVarWChar, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "RtfContent", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand = New System.Data.OleDb.OleDbCommand()
			Me._adapter.UpdateCommand.Connection = Me.Connection
			Me._adapter.UpdateCommand.CommandText = "UPDATE `Cars` SET `Trademark` = ?, `Model` = ?, `HP` = ?, `Liter` = ?, `Cyl` = ?, `TransmissSpeedCount` = ?, `TransmissAutomatic` = ?, `MPG_City` = ?, `MPG_Highway` = ?, `Category` = ?, `Description` = ?, `Hyperlink` = ?, `Picture` = ?, `Price` = ?, `RtfContent` = ? WHERE ((`ID` = ?) AND ((? = 1 AND `Trademark` IS NULL) OR (`Trademark` = ?)) AND ((? = 1 AND `Model` IS NULL) OR (`Model` = ?)) AND ((? = 1 AND `HP` IS NULL) OR (`HP` = ?)) AND ((? = 1 AND `Liter` IS NULL) OR (`Liter` = ?)) AND ((? = 1 AND `Cyl` IS NULL) OR (`Cyl` = ?)) AND ((? = 1 AND `TransmissSpeedCount` IS NULL) OR (`TransmissSpeedCount` = ?)) AND ((? = 1 AND `TransmissAutomatic` IS NULL) OR (`TransmissAutomatic` = ?)) AND ((? = 1 AND `MPG_City` IS NULL) OR (`MPG_City` = ?)) AND ((? = 1 AND `MPG_Highway` IS NULL) OR (`MPG_Highway` = ?)) AND ((? = 1 AND `Category` IS NULL) OR (`Category` = ?)) AND ((? = 1 AND `Hyperlink` IS NULL) OR (`Hyperlink` = ?)) AND ((? = 1 AND `Price` IS NULL) OR (`Price` = ?)))"
			Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Trademark", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Trademark", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Model", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Model", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("HP", System.Data.OleDb.OleDbType.SmallInt, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "HP", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Liter", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Liter", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Cyl", System.Data.OleDb.OleDbType.UnsignedTinyInt, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Cyl", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("TransmissSpeedCount", System.Data.OleDb.OleDbType.UnsignedTinyInt, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "TransmissSpeedCount", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("TransmissAutomatic", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "TransmissAutomatic", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("MPG_City", System.Data.OleDb.OleDbType.UnsignedTinyInt, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "MPG_City", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("MPG_Highway", System.Data.OleDb.OleDbType.UnsignedTinyInt, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "MPG_Highway", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Category", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Category", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Description", System.Data.OleDb.OleDbType.LongVarWChar, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Description", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Hyperlink", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Hyperlink", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Picture", System.Data.OleDb.OleDbType.LongVarBinary, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Picture", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Price", System.Data.OleDb.OleDbType.Currency, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Price", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("RtfContent", System.Data.OleDb.OleDbType.LongVarWChar, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "RtfContent", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_ID", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ID", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Trademark", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Trademark", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Trademark", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Trademark", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Model", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Model", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Model", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Model", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_HP", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "HP", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_HP", System.Data.OleDb.OleDbType.SmallInt, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "HP", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Liter", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Liter", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Liter", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Liter", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Cyl", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Cyl", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Cyl", System.Data.OleDb.OleDbType.UnsignedTinyInt, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Cyl", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_TransmissSpeedCount", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "TransmissSpeedCount", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_TransmissSpeedCount", System.Data.OleDb.OleDbType.UnsignedTinyInt, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "TransmissSpeedCount", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_TransmissAutomatic", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "TransmissAutomatic", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_TransmissAutomatic", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "TransmissAutomatic", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_MPG_City", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "MPG_City", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_MPG_City", System.Data.OleDb.OleDbType.UnsignedTinyInt, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "MPG_City", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_MPG_Highway", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "MPG_Highway", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_MPG_Highway", System.Data.OleDb.OleDbType.UnsignedTinyInt, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "MPG_Highway", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Category", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Category", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Category", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Category", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Hyperlink", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Hyperlink", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Hyperlink", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Hyperlink", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Price", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Price", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Price", System.Data.OleDb.OleDbType.Currency, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Price", System.Data.DataRowVersion.Original, False, Nothing))
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Private Sub InitConnection()
			Me._connection = New System.Data.OleDb.OleDbConnection()
			Me._connection.ConnectionString = Global.SimpleCustomFields.Properties.Settings.Default.CarsDBConnectionString
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Private Sub InitCommandCollection()
			Me._commandCollection = New System.Data.OleDb.OleDbCommand(0){}
			Me._commandCollection(0) = New System.Data.OleDb.OleDbCommand()
			Me._commandCollection(0).Connection = Me.Connection
			Me._commandCollection(0).CommandText = "SELECT ID, Trademark, Model, HP, Liter, Cyl, TransmissSpeedCount, TransmissAutoma" & "tic, MPG_City, MPG_Highway, Category, Description, Hyperlink, Picture, Price, R" & "tfContent FROM Cars"
			Me._commandCollection(0).CommandType = System.Data.CommandType.Text
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		<System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
		<System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)>
		Public Overridable Function Fill(ByVal dataTable As CarsDBDataSet.CarsDataTable) As Integer
			Me.Adapter.SelectCommand = Me.CommandCollection(0)
			If (Me.ClearBeforeFill = True) Then
				dataTable.Clear()
			End If
			Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
			Return returnValue
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		<System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
		<System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, True)>
		Public Overridable Function GetData() As CarsDBDataSet.CarsDataTable
			Me.Adapter.SelectCommand = Me.CommandCollection(0)
			Dim dataTable As New CarsDBDataSet.CarsDataTable()
			Me.Adapter.Fill(dataTable)
			Return dataTable
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		<System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
		Public Overridable Function Update(ByVal dataTable As CarsDBDataSet.CarsDataTable) As Integer
			Return Me.Adapter.Update(dataTable)
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		<System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
		Public Overridable Function Update(ByVal dataSet As CarsDBDataSet) As Integer
			Return Me.Adapter.Update(dataSet, "Cars")
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		<System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
		Public Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
			Return Me.Adapter.Update(New System.Data.DataRow() { dataRow})
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		<System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
		Public Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
			Return Me.Adapter.Update(dataRows)
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		<System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
		<System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)>
		Public Overridable Function Delete(ByVal Original_ID As Integer, ByVal Original_Trademark As String, ByVal Original_Model As String, ByVal Original_HP? As Short, ByVal Original_Liter? As Double, ByVal Original_Cyl? As Byte, ByVal Original_TransmissSpeedCount? As Byte, ByVal Original_TransmissAutomatic As String, ByVal Original_MPG_City? As Byte, ByVal Original_MPG_Highway? As Byte, ByVal Original_Category As String, ByVal Original_Hyperlink As String, ByVal Original_Price? As Decimal) As Integer
			Me.Adapter.DeleteCommand.Parameters(0).Value = (CInt(Original_ID))
			If (Original_Trademark Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(1).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(1).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(2).Value = (CStr(Original_Trademark))
			End If
			If (Original_Model Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(3).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(4).Value = System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(3).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(4).Value = (CStr(Original_Model))
			End If
			If (Original_HP.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(5).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(6).Value = (CShort(Original_HP.Value))
			Else
				Me.Adapter.DeleteCommand.Parameters(5).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(6).Value = System.DBNull.Value
			End If
			If (Original_Liter.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(7).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(8).Value = (CDbl(Original_Liter.Value))
			Else
				Me.Adapter.DeleteCommand.Parameters(7).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(8).Value = System.DBNull.Value
			End If
			If (Original_Cyl.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(9).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(10).Value = (CByte(Original_Cyl.Value))
			Else
				Me.Adapter.DeleteCommand.Parameters(9).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(10).Value = System.DBNull.Value
			End If
			If (Original_TransmissSpeedCount.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(11).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(12).Value = (CByte(Original_TransmissSpeedCount.Value))
			Else
				Me.Adapter.DeleteCommand.Parameters(11).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(12).Value = System.DBNull.Value
			End If
			If (Original_TransmissAutomatic Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(13).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(14).Value = System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(13).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(14).Value = (CStr(Original_TransmissAutomatic))
			End If
			If (Original_MPG_City.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(15).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(16).Value = (CByte(Original_MPG_City.Value))
			Else
				Me.Adapter.DeleteCommand.Parameters(15).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(16).Value = System.DBNull.Value
			End If
			If (Original_MPG_Highway.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(17).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(18).Value = (CByte(Original_MPG_Highway.Value))
			Else
				Me.Adapter.DeleteCommand.Parameters(17).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(18).Value = System.DBNull.Value
			End If
			If (Original_Category Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(19).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(20).Value = System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(19).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(20).Value = (CStr(Original_Category))
			End If
			If (Original_Hyperlink Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(21).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(22).Value = System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(21).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(22).Value = (CStr(Original_Hyperlink))
			End If
			If (Original_Price.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(23).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(24).Value = (CDec(Original_Price.Value))
			Else
				Me.Adapter.DeleteCommand.Parameters(23).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(24).Value = System.DBNull.Value
			End If
			Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
			If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) <> System.Data.ConnectionState.Open) Then
				Me.Adapter.DeleteCommand.Connection.Open()
			End If
			Try
				Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery()
				Return returnValue
			Finally
				If (previousConnectionState = System.Data.ConnectionState.Closed) Then
					Me.Adapter.DeleteCommand.Connection.Close()
				End If
			End Try
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		<System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
		<System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)>
		Public Overridable Function Insert(ByVal Trademark As String, ByVal Model As String, ByVal HP? As Short, ByVal Liter? As Double, ByVal Cyl? As Byte, ByVal TransmissSpeedCount? As Byte, ByVal TransmissAutomatic As String, ByVal MPG_City? As Byte, ByVal MPG_Highway? As Byte, ByVal Category As String, ByVal Description As String, ByVal Hyperlink As String, ByVal Picture() As Byte, ByVal Price? As Decimal, ByVal RtfContent As String) As Integer
			If (Trademark Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(0).Value = (CStr(Trademark))
			End If
			If (Model Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(1).Value = (CStr(Model))
			End If
			If (HP.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(2).Value = (CShort(HP.Value))
			Else
				Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
			End If
			If (Liter.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(3).Value = (CDbl(Liter.Value))
			Else
				Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
			End If
			If (Cyl.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(4).Value = (CByte(Cyl.Value))
			Else
				Me.Adapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
			End If
			If (TransmissSpeedCount.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(5).Value = (CByte(TransmissSpeedCount.Value))
			Else
				Me.Adapter.InsertCommand.Parameters(5).Value = System.DBNull.Value
			End If
			If (TransmissAutomatic Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(6).Value = System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(6).Value = (CStr(TransmissAutomatic))
			End If
			If (MPG_City.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(7).Value = (CByte(MPG_City.Value))
			Else
				Me.Adapter.InsertCommand.Parameters(7).Value = System.DBNull.Value
			End If
			If (MPG_Highway.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(8).Value = (CByte(MPG_Highway.Value))
			Else
				Me.Adapter.InsertCommand.Parameters(8).Value = System.DBNull.Value
			End If
			If (Category Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(9).Value = System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(9).Value = (CStr(Category))
			End If
			If (Description Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(10).Value = System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(10).Value = (CStr(Description))
			End If
			If (Hyperlink Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(11).Value = System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(11).Value = (CStr(Hyperlink))
			End If
			If (Picture Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(12).Value = System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(12).Value = (CType(Picture, Byte()))
			End If
			If (Price.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(13).Value = (CDec(Price.Value))
			Else
				Me.Adapter.InsertCommand.Parameters(13).Value = System.DBNull.Value
			End If
			If (RtfContent Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(14).Value = System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(14).Value = (CStr(RtfContent))
			End If
			Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
			If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) <> System.Data.ConnectionState.Open) Then
				Me.Adapter.InsertCommand.Connection.Open()
			End If
			Try
				Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery()
				Return returnValue
			Finally
				If (previousConnectionState = System.Data.ConnectionState.Closed) Then
					Me.Adapter.InsertCommand.Connection.Close()
				End If
			End Try
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		<System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
		<System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)>
		Public Overridable Function Update(ByVal Trademark As String, ByVal Model As String, ByVal HP? As Short, ByVal Liter? As Double, ByVal Cyl? As Byte, ByVal TransmissSpeedCount? As Byte, ByVal TransmissAutomatic As String, ByVal MPG_City? As Byte, ByVal MPG_Highway? As Byte, ByVal Category As String, ByVal Description As String, ByVal Hyperlink As String, ByVal Picture() As Byte, ByVal Price? As Decimal, ByVal RtfContent As String, ByVal Original_ID As Integer, ByVal Original_Trademark As String, ByVal Original_Model As String, ByVal Original_HP? As Short, ByVal Original_Liter? As Double, ByVal Original_Cyl? As Byte, ByVal Original_TransmissSpeedCount? As Byte, ByVal Original_TransmissAutomatic As String, ByVal Original_MPG_City? As Byte, ByVal Original_MPG_Highway? As Byte, ByVal Original_Category As String, ByVal Original_Hyperlink As String, ByVal Original_Price? As Decimal) As Integer
			If (Trademark Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(0).Value = System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(0).Value = (CStr(Trademark))
			End If
			If (Model Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(1).Value = (CStr(Model))
			End If
			If (HP.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(2).Value = (CShort(HP.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
			End If
			If (Liter.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(3).Value = (CDbl(Liter.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
			End If
			If (Cyl.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(4).Value = (CByte(Cyl.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
			End If
			If (TransmissSpeedCount.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(5).Value = (CByte(TransmissSpeedCount.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
			End If
			If (TransmissAutomatic Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(6).Value = (CStr(TransmissAutomatic))
			End If
			If (MPG_City.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(7).Value = (CByte(MPG_City.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNull.Value
			End If
			If (MPG_Highway.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(8).Value = (CByte(MPG_Highway.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
			End If
			If (Category Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(9).Value = System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(9).Value = (CStr(Category))
			End If
			If (Description Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(10).Value = System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(10).Value = (CStr(Description))
			End If
			If (Hyperlink Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(11).Value = System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(11).Value = (CStr(Hyperlink))
			End If
			If (Picture Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(12).Value = System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(12).Value = (CType(Picture, Byte()))
			End If
			If (Price.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(13).Value = (CDec(Price.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(13).Value = System.DBNull.Value
			End If
			If (RtfContent Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(14).Value = System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(14).Value = (CStr(RtfContent))
			End If
			Me.Adapter.UpdateCommand.Parameters(15).Value = (CInt(Original_ID))
			If (Original_Trademark Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(16).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(17).Value = System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(16).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(17).Value = (CStr(Original_Trademark))
			End If
			If (Original_Model Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(18).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(19).Value = System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(18).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(19).Value = (CStr(Original_Model))
			End If
			If (Original_HP.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(20).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(21).Value = (CShort(Original_HP.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(20).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(21).Value = System.DBNull.Value
			End If
			If (Original_Liter.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(22).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(23).Value = (CDbl(Original_Liter.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(22).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(23).Value = System.DBNull.Value
			End If
			If (Original_Cyl.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(24).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(25).Value = (CByte(Original_Cyl.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(24).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(25).Value = System.DBNull.Value
			End If
			If (Original_TransmissSpeedCount.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(26).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(27).Value = (CByte(Original_TransmissSpeedCount.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(26).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(27).Value = System.DBNull.Value
			End If
			If (Original_TransmissAutomatic Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(28).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(29).Value = System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(28).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(29).Value = (CStr(Original_TransmissAutomatic))
			End If
			If (Original_MPG_City.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(30).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(31).Value = (CByte(Original_MPG_City.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(30).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(31).Value = System.DBNull.Value
			End If
			If (Original_MPG_Highway.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(32).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(33).Value = (CByte(Original_MPG_Highway.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(32).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(33).Value = System.DBNull.Value
			End If
			If (Original_Category Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(34).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(35).Value = System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(34).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(35).Value = (CStr(Original_Category))
			End If
			If (Original_Hyperlink Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(36).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(37).Value = System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(36).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(37).Value = (CStr(Original_Hyperlink))
			End If
			If (Original_Price.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(38).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(39).Value = (CDec(Original_Price.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(38).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(39).Value = System.DBNull.Value
			End If
			Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
			If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) <> System.Data.ConnectionState.Open) Then
				Me.Adapter.UpdateCommand.Connection.Open()
			End If
			Try
				Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery()
				Return returnValue
			Finally
				If (previousConnectionState = System.Data.ConnectionState.Closed) Then
					Me.Adapter.UpdateCommand.Connection.Close()
				End If
			End Try
		End Function
	End Class

	''' <summary>
	'''Represents the connection and commands used to retrieve and save data.
	'''</summary>
	<System.ComponentModel.DesignerCategoryAttribute("code")>
	<System.ComponentModel.ToolboxItem(True)>
	<System.ComponentModel.DataObjectAttribute(True)>
	<System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")>
	<System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
	Partial Public Class CarSchedulingTableAdapter
		Inherits System.ComponentModel.Component

		Private _adapter As System.Data.OleDb.OleDbDataAdapter

		Private _connection As System.Data.OleDb.OleDbConnection

		Private _commandCollection() As System.Data.OleDb.OleDbCommand

		Private _clearBeforeFill As Boolean

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Public Sub New()
			Me.ClearBeforeFill = True
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Public ReadOnly Property Adapter() As System.Data.OleDb.OleDbDataAdapter
			Get
				If (Me._adapter Is Nothing) Then
					Me.InitAdapter()
				End If
				Return Me._adapter
			End Get
		End Property

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Friend Property Connection() As System.Data.OleDb.OleDbConnection
			Get
				If (Me._connection Is Nothing) Then
					Me.InitConnection()
				End If
				Return Me._connection
			End Get
			Set(ByVal value As System.Data.OleDb.OleDbConnection)
				Me._connection = value
				If (Me.Adapter.InsertCommand IsNot Nothing) Then
					Me.Adapter.InsertCommand.Connection = value
				End If
				If (Me.Adapter.DeleteCommand IsNot Nothing) Then
					Me.Adapter.DeleteCommand.Connection = value
				End If
				If (Me.Adapter.UpdateCommand IsNot Nothing) Then
					Me.Adapter.UpdateCommand.Connection = value
				End If
				Dim i As Integer = 0
				Do While (i < Me.CommandCollection.Length)
					If (Me.CommandCollection(i) IsNot Nothing) Then
						CType(Me.CommandCollection(i), System.Data.OleDb.OleDbCommand).Connection = value
					End If
					i = (i + 1)
				Loop
			End Set
		End Property

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Protected ReadOnly Property CommandCollection() As System.Data.OleDb.OleDbCommand()
			Get
				If (Me._commandCollection Is Nothing) Then
					Me.InitCommandCollection()
				End If
				Return Me._commandCollection
			End Get
		End Property

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Public Property ClearBeforeFill() As Boolean
			Get
				Return Me._clearBeforeFill
			End Get
			Set(ByVal value As Boolean)
				Me._clearBeforeFill = value
			End Set
		End Property

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Private Sub InitAdapter()
			Me._adapter = New System.Data.OleDb.OleDbDataAdapter()
			Dim tableMapping As New System.Data.Common.DataTableMapping()
			tableMapping.SourceTable = "Table"
			tableMapping.DataSetTable = "CarScheduling"
			tableMapping.ColumnMappings.Add("ID", "ID")
			tableMapping.ColumnMappings.Add("CarId", "CarId")
			tableMapping.ColumnMappings.Add("UserId", "UserId")
			tableMapping.ColumnMappings.Add("Status", "Status")
			tableMapping.ColumnMappings.Add("Subject", "Subject")
			tableMapping.ColumnMappings.Add("Description", "Description")
			tableMapping.ColumnMappings.Add("Label", "Label")
			tableMapping.ColumnMappings.Add("StartTime", "StartTime")
			tableMapping.ColumnMappings.Add("EndTime", "EndTime")
			tableMapping.ColumnMappings.Add("Location", "Location")
			tableMapping.ColumnMappings.Add("AllDay", "AllDay")
			tableMapping.ColumnMappings.Add("EventType", "EventType")
			tableMapping.ColumnMappings.Add("RecurrenceInfo", "RecurrenceInfo")
			tableMapping.ColumnMappings.Add("ReminderInfo", "ReminderInfo")
			tableMapping.ColumnMappings.Add("Price", "Price")
			tableMapping.ColumnMappings.Add("ContactInfo", "ContactInfo")
			Me._adapter.TableMappings.Add(tableMapping)
			Me._adapter.DeleteCommand = New System.Data.OleDb.OleDbCommand()
			Me._adapter.DeleteCommand.Connection = Me.Connection
			Me._adapter.DeleteCommand.CommandText = "DELETE FROM `CarScheduling` WHERE ((`ID` = ?) AND ((? = 1 AND `CarId` IS NULL) OR (`CarId` = ?)) AND ((? = 1 AND `UserId` IS NULL) OR (`UserId` = ?)) AND ((? = 1 AND `Status` IS NULL) OR (`Status` = ?)) AND ((? = 1 AND `Subject` IS NULL) OR (`Subject` = ?)) AND ((? = 1 AND `Label` IS NULL) OR (`Label` = ?)) AND ((? = 1 AND `StartTime` IS NULL) OR (`StartTime` = ?)) AND ((? = 1 AND `EndTime` IS NULL) OR (`EndTime` = ?)) AND ((? = 1 AND `Location` IS NULL) OR (`Location` = ?)) AND ((? = 1 AND `AllDay` IS NULL) OR (`AllDay` = ?)) AND ((? = 1 AND `EventType` IS NULL) OR (`EventType` = ?)) AND ((? = 1 AND `Price` IS NULL) OR (`Price` = ?)))"
			Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_ID", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ID", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_CarId", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CarId", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_CarId", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CarId", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_UserId", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "UserId", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_UserId", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "UserId", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Status", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Status", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Status", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Status", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Subject", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Subject", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Subject", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Subject", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Label", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Label", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Label", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Label", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_StartTime", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "StartTime", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_StartTime", System.Data.OleDb.OleDbType.Date, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "StartTime", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_EndTime", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "EndTime", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_EndTime", System.Data.OleDb.OleDbType.Date, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "EndTime", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Location", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Location", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Location", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Location", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_AllDay", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "AllDay", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_AllDay", System.Data.OleDb.OleDbType.Boolean, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "AllDay", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_EventType", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "EventType", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_EventType", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "EventType", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Price", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Price", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Price", System.Data.OleDb.OleDbType.Currency, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Price", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.InsertCommand = New System.Data.OleDb.OleDbCommand()
			Me._adapter.InsertCommand.Connection = Me.Connection
			Me._adapter.InsertCommand.CommandText = "INSERT INTO `CarScheduling` (`CarId`, `UserId`, `Status`, `Subject`, `Description`, `Label`, `StartTime`, `EndTime`, `Location`, `AllDay`, `EventType`, `RecurrenceInfo`, `ReminderInfo`, `Price`, `ContactInfo`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
			Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
			Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("CarId", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CarId", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("UserId", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "UserId", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Status", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Status", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Subject", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Subject", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Description", System.Data.OleDb.OleDbType.LongVarWChar, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Description", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Label", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Label", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("StartTime", System.Data.OleDb.OleDbType.Date, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "StartTime", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("EndTime", System.Data.OleDb.OleDbType.Date, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "EndTime", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Location", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Location", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("AllDay", System.Data.OleDb.OleDbType.Boolean, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "AllDay", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("EventType", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "EventType", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("RecurrenceInfo", System.Data.OleDb.OleDbType.LongVarWChar, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "RecurrenceInfo", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("ReminderInfo", System.Data.OleDb.OleDbType.LongVarWChar, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ReminderInfo", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Price", System.Data.OleDb.OleDbType.Currency, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Price", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("ContactInfo", System.Data.OleDb.OleDbType.LongVarWChar, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ContactInfo", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand = New System.Data.OleDb.OleDbCommand()
			Me._adapter.UpdateCommand.Connection = Me.Connection
			Me._adapter.UpdateCommand.CommandText = "UPDATE `CarScheduling` SET `CarId` = ?, `UserId` = ?, `Status` = ?, `Subject` = ?, `Description` = ?, `Label` = ?, `StartTime` = ?, `EndTime` = ?, `Location` = ?, `AllDay` = ?, `EventType` = ?, `RecurrenceInfo` = ?, `ReminderInfo` = ?, `Price` = ?, `ContactInfo` = ? WHERE ((`ID` = ?) AND ((? = 1 AND `CarId` IS NULL) OR (`CarId` = ?)) AND ((? = 1 AND `UserId` IS NULL) OR (`UserId` = ?)) AND ((? = 1 AND `Status` IS NULL) OR (`Status` = ?)) AND ((? = 1 AND `Subject` IS NULL) OR (`Subject` = ?)) AND ((? = 1 AND `Label` IS NULL) OR (`Label` = ?)) AND ((? = 1 AND `StartTime` IS NULL) OR (`StartTime` = ?)) AND ((? = 1 AND `EndTime` IS NULL) OR (`EndTime` = ?)) AND ((? = 1 AND `Location` IS NULL) OR (`Location` = ?)) AND ((? = 1 AND `AllDay` IS NULL) OR (`AllDay` = ?)) AND ((? = 1 AND `EventType` IS NULL) OR (`EventType` = ?)) AND ((? = 1 AND `Price` IS NULL) OR (`Price` = ?)))"
			Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("CarId", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CarId", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("UserId", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "UserId", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Status", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Status", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Subject", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Subject", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Description", System.Data.OleDb.OleDbType.LongVarWChar, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Description", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Label", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Label", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("StartTime", System.Data.OleDb.OleDbType.Date, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "StartTime", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("EndTime", System.Data.OleDb.OleDbType.Date, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "EndTime", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Location", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Location", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("AllDay", System.Data.OleDb.OleDbType.Boolean, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "AllDay", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("EventType", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "EventType", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("RecurrenceInfo", System.Data.OleDb.OleDbType.LongVarWChar, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "RecurrenceInfo", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("ReminderInfo", System.Data.OleDb.OleDbType.LongVarWChar, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ReminderInfo", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Price", System.Data.OleDb.OleDbType.Currency, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Price", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("ContactInfo", System.Data.OleDb.OleDbType.LongVarWChar, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ContactInfo", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_ID", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ID", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_CarId", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CarId", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_CarId", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CarId", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_UserId", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "UserId", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_UserId", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "UserId", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Status", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Status", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Status", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Status", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Subject", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Subject", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Subject", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Subject", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Label", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Label", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Label", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Label", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_StartTime", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "StartTime", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_StartTime", System.Data.OleDb.OleDbType.Date, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "StartTime", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_EndTime", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "EndTime", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_EndTime", System.Data.OleDb.OleDbType.Date, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "EndTime", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Location", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Location", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Location", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Location", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_AllDay", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "AllDay", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_AllDay", System.Data.OleDb.OleDbType.Boolean, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "AllDay", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_EventType", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "EventType", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_EventType", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "EventType", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Price", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Price", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Price", System.Data.OleDb.OleDbType.Currency, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Price", System.Data.DataRowVersion.Original, False, Nothing))
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Private Sub InitConnection()
			Me._connection = New System.Data.OleDb.OleDbConnection()
			Me._connection.ConnectionString = Global.SimpleCustomFields.Properties.Settings.Default.CarsDBConnectionString
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Private Sub InitCommandCollection()
			Me._commandCollection = New System.Data.OleDb.OleDbCommand(0){}
			Me._commandCollection(0) = New System.Data.OleDb.OleDbCommand()
			Me._commandCollection(0).Connection = Me.Connection
			Me._commandCollection(0).CommandText = "SELECT ID, CarId, UserId, Status, Subject, Description, Label, StartTime, EndTime" & ", Location, AllDay, EventType, RecurrenceInfo, ReminderInfo, Price, ContactInfo" & " FROM CarScheduling"
			Me._commandCollection(0).CommandType = System.Data.CommandType.Text
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		<System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
		<System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)>
		Public Overridable Function Fill(ByVal dataTable As CarsDBDataSet.CarSchedulingDataTable) As Integer
			Me.Adapter.SelectCommand = Me.CommandCollection(0)
			If (Me.ClearBeforeFill = True) Then
				dataTable.Clear()
			End If
			Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
			Return returnValue
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		<System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
		<System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, True)>
		Public Overridable Function GetData() As CarsDBDataSet.CarSchedulingDataTable
			Me.Adapter.SelectCommand = Me.CommandCollection(0)
			Dim dataTable As New CarsDBDataSet.CarSchedulingDataTable()
			Me.Adapter.Fill(dataTable)
			Return dataTable
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		<System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
		Public Overridable Function Update(ByVal dataTable As CarsDBDataSet.CarSchedulingDataTable) As Integer
			Return Me.Adapter.Update(dataTable)
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		<System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
		Public Overridable Function Update(ByVal dataSet As CarsDBDataSet) As Integer
			Return Me.Adapter.Update(dataSet, "CarScheduling")
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		<System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
		Public Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
			Return Me.Adapter.Update(New System.Data.DataRow() { dataRow})
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		<System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
		Public Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
			Return Me.Adapter.Update(dataRows)
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		<System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
		<System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)>
		Public Overridable Function Delete(ByVal Original_ID As Integer, ByVal Original_CarId? As Integer, ByVal Original_UserId? As Integer, ByVal Original_Status? As Integer, ByVal Original_Subject As String, ByVal Original_Label? As Integer, ByVal Original_StartTime? As DateTime, ByVal Original_EndTime? As DateTime, ByVal Original_Location As String, ByVal Original_AllDay As Boolean, ByVal Original_EventType? As Integer, ByVal Original_Price? As Decimal) As Integer
			Me.Adapter.DeleteCommand.Parameters(0).Value = (CInt(Original_ID))
			If (Original_CarId.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(1).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(2).Value = (CInt(Original_CarId.Value))
			Else
				Me.Adapter.DeleteCommand.Parameters(1).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
			End If
			If (Original_UserId.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(3).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(4).Value = (CInt(Original_UserId.Value))
			Else
				Me.Adapter.DeleteCommand.Parameters(3).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(4).Value = System.DBNull.Value
			End If
			If (Original_Status.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(5).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(6).Value = (CInt(Original_Status.Value))
			Else
				Me.Adapter.DeleteCommand.Parameters(5).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(6).Value = System.DBNull.Value
			End If
			If (Original_Subject Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(7).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(8).Value = System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(7).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(8).Value = (CStr(Original_Subject))
			End If
			If (Original_Label.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(9).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(10).Value = (CInt(Original_Label.Value))
			Else
				Me.Adapter.DeleteCommand.Parameters(9).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(10).Value = System.DBNull.Value
			End If
			If (Original_StartTime.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(11).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(12).Value = (CDate(Original_StartTime.Value))
			Else
				Me.Adapter.DeleteCommand.Parameters(11).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(12).Value = System.DBNull.Value
			End If
			If (Original_EndTime.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(13).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(14).Value = (CDate(Original_EndTime.Value))
			Else
				Me.Adapter.DeleteCommand.Parameters(13).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(14).Value = System.DBNull.Value
			End If
			If (Original_Location Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(15).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(16).Value = System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(15).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(16).Value = (CStr(Original_Location))
			End If
			Me.Adapter.DeleteCommand.Parameters(17).Value = (CObj(0))
			Me.Adapter.DeleteCommand.Parameters(18).Value = (CBool(Original_AllDay))
			If (Original_EventType.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(19).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(20).Value = (CInt(Original_EventType.Value))
			Else
				Me.Adapter.DeleteCommand.Parameters(19).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(20).Value = System.DBNull.Value
			End If
			If (Original_Price.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(21).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(22).Value = (CDec(Original_Price.Value))
			Else
				Me.Adapter.DeleteCommand.Parameters(21).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(22).Value = System.DBNull.Value
			End If
			Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
			If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) <> System.Data.ConnectionState.Open) Then
				Me.Adapter.DeleteCommand.Connection.Open()
			End If
			Try
				Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery()
				Return returnValue
			Finally
				If (previousConnectionState = System.Data.ConnectionState.Closed) Then
					Me.Adapter.DeleteCommand.Connection.Close()
				End If
			End Try
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		<System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
		<System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)>
		Public Overridable Function Insert(ByVal CarId? As Integer, ByVal UserId? As Integer, ByVal Status? As Integer, ByVal Subject As String, ByVal Description As String, ByVal Label? As Integer, ByVal StartTime? As DateTime, ByVal EndTime? As DateTime, ByVal Location As String, ByVal AllDay As Boolean, ByVal EventType? As Integer, ByVal RecurrenceInfo As String, ByVal ReminderInfo As String, ByVal Price? As Decimal, ByVal ContactInfo As String) As Integer
			If (CarId.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(0).Value = (CInt(CarId.Value))
			Else
				Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
			End If
			If (UserId.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(1).Value = (CInt(UserId.Value))
			Else
				Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
			End If
			If (Status.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(2).Value = (CInt(Status.Value))
			Else
				Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
			End If
			If (Subject Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(3).Value = (CStr(Subject))
			End If
			If (Description Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(4).Value = (CStr(Description))
			End If
			If (Label.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(5).Value = (CInt(Label.Value))
			Else
				Me.Adapter.InsertCommand.Parameters(5).Value = System.DBNull.Value
			End If
			If (StartTime.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(6).Value = (CDate(StartTime.Value))
			Else
				Me.Adapter.InsertCommand.Parameters(6).Value = System.DBNull.Value
			End If
			If (EndTime.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(7).Value = (CDate(EndTime.Value))
			Else
				Me.Adapter.InsertCommand.Parameters(7).Value = System.DBNull.Value
			End If
			If (Location Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(8).Value = System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(8).Value = (CStr(Location))
			End If
			Me.Adapter.InsertCommand.Parameters(9).Value = (CBool(AllDay))
			If (EventType.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(10).Value = (CInt(EventType.Value))
			Else
				Me.Adapter.InsertCommand.Parameters(10).Value = System.DBNull.Value
			End If
			If (RecurrenceInfo Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(11).Value = System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(11).Value = (CStr(RecurrenceInfo))
			End If
			If (ReminderInfo Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(12).Value = System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(12).Value = (CStr(ReminderInfo))
			End If
			If (Price.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(13).Value = (CDec(Price.Value))
			Else
				Me.Adapter.InsertCommand.Parameters(13).Value = System.DBNull.Value
			End If
			If (ContactInfo Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(14).Value = System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(14).Value = (CStr(ContactInfo))
			End If
			Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
			If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) <> System.Data.ConnectionState.Open) Then
				Me.Adapter.InsertCommand.Connection.Open()
			End If
			Try
				Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery()
				Return returnValue
			Finally
				If (previousConnectionState = System.Data.ConnectionState.Closed) Then
					Me.Adapter.InsertCommand.Connection.Close()
				End If
			End Try
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		<System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
		<System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)>
		Public Overridable Function Update(ByVal CarId? As Integer, ByVal UserId? As Integer, ByVal Status? As Integer, ByVal Subject As String, ByVal Description As String, ByVal Label? As Integer, ByVal StartTime? As DateTime, ByVal EndTime? As DateTime, ByVal Location As String, ByVal AllDay As Boolean, ByVal EventType? As Integer, ByVal RecurrenceInfo As String, ByVal ReminderInfo As String, ByVal Price? As Decimal, ByVal ContactInfo As String, ByVal Original_ID As Integer, ByVal Original_CarId? As Integer, ByVal Original_UserId? As Integer, ByVal Original_Status? As Integer, ByVal Original_Subject As String, ByVal Original_Label? As Integer, ByVal Original_StartTime? As DateTime, ByVal Original_EndTime? As DateTime, ByVal Original_Location As String, ByVal Original_AllDay As Boolean, ByVal Original_EventType? As Integer, ByVal Original_Price? As Decimal) As Integer
			If (CarId.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(0).Value = (CInt(CarId.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(0).Value = System.DBNull.Value
			End If
			If (UserId.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(1).Value = (CInt(UserId.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
			End If
			If (Status.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(2).Value = (CInt(Status.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
			End If
			If (Subject Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(3).Value = (CStr(Subject))
			End If
			If (Description Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(4).Value = (CStr(Description))
			End If
			If (Label.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(5).Value = (CInt(Label.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
			End If
			If (StartTime.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(6).Value = (CDate(StartTime.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
			End If
			If (EndTime.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(7).Value = (CDate(EndTime.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNull.Value
			End If
			If (Location Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(8).Value = (CStr(Location))
			End If
			Me.Adapter.UpdateCommand.Parameters(9).Value = (CBool(AllDay))
			If (EventType.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(10).Value = (CInt(EventType.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(10).Value = System.DBNull.Value
			End If
			If (RecurrenceInfo Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(11).Value = System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(11).Value = (CStr(RecurrenceInfo))
			End If
			If (ReminderInfo Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(12).Value = System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(12).Value = (CStr(ReminderInfo))
			End If
			If (Price.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(13).Value = (CDec(Price.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(13).Value = System.DBNull.Value
			End If
			If (ContactInfo Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(14).Value = System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(14).Value = (CStr(ContactInfo))
			End If
			Me.Adapter.UpdateCommand.Parameters(15).Value = (CInt(Original_ID))
			If (Original_CarId.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(16).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(17).Value = (CInt(Original_CarId.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(16).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(17).Value = System.DBNull.Value
			End If
			If (Original_UserId.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(18).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(19).Value = (CInt(Original_UserId.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(18).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(19).Value = System.DBNull.Value
			End If
			If (Original_Status.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(20).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(21).Value = (CInt(Original_Status.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(20).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(21).Value = System.DBNull.Value
			End If
			If (Original_Subject Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(22).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(23).Value = System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(22).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(23).Value = (CStr(Original_Subject))
			End If
			If (Original_Label.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(24).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(25).Value = (CInt(Original_Label.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(24).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(25).Value = System.DBNull.Value
			End If
			If (Original_StartTime.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(26).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(27).Value = (CDate(Original_StartTime.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(26).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(27).Value = System.DBNull.Value
			End If
			If (Original_EndTime.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(28).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(29).Value = (CDate(Original_EndTime.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(28).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(29).Value = System.DBNull.Value
			End If
			If (Original_Location Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(30).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(31).Value = System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(30).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(31).Value = (CStr(Original_Location))
			End If
			Me.Adapter.UpdateCommand.Parameters(32).Value = (CObj(0))
			Me.Adapter.UpdateCommand.Parameters(33).Value = (CBool(Original_AllDay))
			If (Original_EventType.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(34).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(35).Value = (CInt(Original_EventType.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(34).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(35).Value = System.DBNull.Value
			End If
			If (Original_Price.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(36).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(37).Value = (CDec(Original_Price.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(36).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(37).Value = System.DBNull.Value
			End If
			Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
			If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) <> System.Data.ConnectionState.Open) Then
				Me.Adapter.UpdateCommand.Connection.Open()
			End If
			Try
				Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery()
				Return returnValue
			Finally
				If (previousConnectionState = System.Data.ConnectionState.Closed) Then
					Me.Adapter.UpdateCommand.Connection.Close()
				End If
			End Try
		End Function
	End Class
End Namespace

#Enable Warning BC1591